import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

def homePath = System.properties['user.home']
def storePasswd = System.getenv('autojspasswd')
def keyPasswd = System.getenv('autojspasswd')
def alias = System.getenv('autojsalias')
def signSupport = false
android {
    compileSdkVersion versions.compile
    buildToolsVersion versions.buildTool

    signingConfigs {
        if (file(homePath + '/auto-js-t-pkcs12.jks').exists()) {
            signSupport = true
            release {
                storeFile file(homePath + '/auto-js-t-pkcs12.jks')
                storePassword storePasswd
                keyPassword keyPasswd
                keyAlias = alias
            }
        }
    }
    defaultConfig {
        applicationId "com.stardust.autojs.inrt"
        minSdkVersion versions.mini
        targetSdkVersion versions.buildApkTarget
        versionCode versions.appVersionCode - 200
        versionName versions.appVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // abi拆分
    flavorDimensions "abi"
    productFlavors {
        arm64_v8a {
            dimension "abi"
            ndk {
                abiFilters "arm64-v8a"
            }
        }
        armeabi_v7a {
            dimension "abi"
            ndk {
                abiFilters "armeabi-v7a"
            }
        }
        x86 {
            dimension "abi"
            ndk {
                abiFilters "x86"
            }
        }
        x86_64 {
            dimension "abi"
            ndk {
                abiFilters "x86_64"
            }
        }
        universal {
            dimension "abi"
            ndk {
                abiFilters "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
            }
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        if (signSupport) {
            println('sign support')
            release.signingConfig = signingConfigs.release
        } else {
            println('sign is not support')
        }
    }
    lint {
        abortOnError false
        disable 'MissingTranslation', 'ExtraTranslation'
    }
}

repositories {
    google()
}

dependencies {
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.1-alpha01', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    //Glide
    implementation('com.github.bumptech.glide:glide:4.12.0', {
        exclude group: 'com.android.support'
    })
    testImplementation "junit:junit:$junit_version"
    api project(path: ':autojs-aar:opencv')
    api project(path: ':autojs-aar:libtermexec')
    api project(path: ':autojs-aar:emulatorview')
    api project(path: ':autojs-aar:term')
    implementation project(':automator')
    implementation project(':common')
    implementation project(':autojs')
}
